package com.userapp.controllers;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.context.annotation.Import;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.bean.override.mockito.MockitoBean;
import org.springframework.test.web.servlet.MockMvc;

import com.userapp.entities.User;
import com.userapp.services.UserService;
@WebMvcTest//Loads only Spring MVC components (controllers,filters
//Loads only the given class (UserController) into the Spring test context.
@ContextConfiguration(classes = {UserController.class}) // Only load the controller
@Import(org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration.class)
class UserControllerTest {

  @Autowired
  //MockMvc to fake HTTP calls
  private MockMvc mockMvc;

  @MockitoBean// replaces the real bean with a mock
  private UserService userService;

  @Test
  void addUserTest() throws Exception {
      User user = new User(1L, "Surya", "surya@gmail.com");
      //"When userService.save(...) is called with any argument,
      //then return this user object instead of running real logic."
      Mockito.when(userService.save(Mockito.any())).thenReturn(user);

      mockMvc.perform(
              post("/addNewUser")                           // 1. POST request to the endpoint
              .contentType("application/json")              // 2. Tells Spring: "I'm sending JSON"
              .content("""
                  {
                    "name": "Surya",
                    "email": "surya@gmail.com"
                  }
              """)                                           // 3. Actual request body
          )
          .andExpect(status().isOk())                        // 4. Expect HTTP 200 OK response
          .andExpect(jsonPath("$.name").value("Surya"));  
      // 5. Expect response JSON to have name = "Surya"
}
  
}